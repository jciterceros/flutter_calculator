@startuml "Calculator"
package "Calculator" {

class Operation {
  - static const validOperations : List<String>
  - String value
  + Operation(String value)
  + bool isArithmeticOperation()
  + bool isValid()
  + bool isEqualOperation()
  + String toString()
  + bool operator ==(Object other)
  + int get hashCode
}

interface IMemory {
  + void applyCommand(String command)
  + String get value
}

class Memory {
  - static const operations : List<String>
  - CalculatorEntity _calculatorEntity
  + void applyCommand(String command)
  + String get value
  - bool _shouldReplaceOperation(String command)
  - void _setOperation(Operation operation)
  - void _addDigit(String digit)
  - double _calculate()
  - double _modulo()
  - double _divide()
  - double _multiply()
  - double _subtract()
  - double _add()
  - void _allClear()
}

Memory --> IMemory
Memory --> CalculatorEntity
Memory --> Operation

class Calculator extends StatelessWidget {
  - memory: Memory
  + Calculator({required Memory memory})
  + build(BuildContext context): Widget
}

Memory --> Calculator
Calculator <|-- StatelessWidget

class CalculatorEntity {
  - List<double> buffer
  - int currentBufferIndex
  - String operation
  - String displayValue
  - bool wipeValue
  - String lastCommand

  + copyWith()
  + reset()
  + updateBufferAndDisplay(double value, int bufferIndex)
  + formatValue(double value): String
}

class MemoryDataSource {
  - Memory _memory
  + String applyCommand(String command)
}

MemoryDataSource --> Memory : uses
MemoryDataSource --> CalculatorEntity : indirectly uses

interface CalculatorRepository {
  + String calculate(String expression)
}

class CalculatorRepositoryImpl {
  - MemoryDataSource _memoryDataSource
  + String calculate(String expression)
}

CalculatorRepositoryImpl --> CalculatorRepository : implements
CalculatorRepositoryImpl --> MemoryDataSource : uses

}
@enduml